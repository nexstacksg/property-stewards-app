generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Application users for admin access
model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         Role     @default(ADMIN)
  confirmed    Boolean  @default(false)
  itemEntries  ItemEntry[]
  reports      ContractReport[]
  contractRemarks ContractRemark[]
}

model Customer {
  id              String            @id @default(cuid())
  name            String
  type            CustomerType
  personInCharge  String
  email           String
  phone           String
  isMember        Boolean           @default(false)
  memberSince     DateTime?
  memberExpiredOn DateTime?
  memberTier      MemberTier?
  billingAddress  String
  remarks         String?
  createdOn       DateTime          @default(now())
  updatedOn       DateTime          @updatedAt
  status          Status            @default(ACTIVE)
  contracts       Contract[]
  addresses       CustomerAddress[]

  @@index([email])
  @@index([phone])
  @@index([status])
}

model CustomerAddress {
  id           String       @id @default(cuid())
  customerId   String
  address      String
  postalCode   String
  propertyType PropertyType
  propertySize PropertySize
  propertySizeRange String?
  relationship PropertyRelationship?
  remarks      String?
  createdOn    DateTime     @default(now())
  updatedOn    DateTime     @updatedAt
  status       Status       @default(ACTIVE)
  contracts    Contract[]
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([status])
}

model Inspector {
  id             String                  @id @default(cuid())
  name           String
  mobilePhone    String                  @unique
  type           InspectorType
  specialization String?
  remarks        String?
  createdOn      DateTime                @default(now())
  updatedOn      DateTime                @updatedAt
  status         Status                  @default(ACTIVE)
  checklistItems ContractChecklistItem[]
  workOrders     WorkOrder[]
  itemEntries    ItemEntry[]
  checklistTasks ChecklistTask[]
  // Ratings moved to Contract.inspectorRatings (JSON)

  @@index([mobilePhone])
  @@index([status])
}

model Checklist {
  id           String          @id @default(cuid())
  name         String
  propertyType PropertyType
  remarks      String?
  createdOn    DateTime        @default(now())
  updatedOn    DateTime        @updatedAt
  status       Status          @default(ACTIVE)
  items        ChecklistItem[]
  contracts    Contract[]

  @@index([propertyType])
  @@index([status])
}

model ChecklistItem {
  id          String    @id @default(cuid())
  checklistId String
  name        String
  category    String    @default("GENERAL")
  order       Int
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  tasks       ChecklistItemTask[]

  @@unique([checklistId, order])
  @@index([checklistId])
}

model ChecklistItemTask {
  id              String        @id @default(cuid())
  checklistItemId String
  name            String
  actions         String[]      @default([])
  order           Int
  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)

  @@unique([checklistItemId, order])
  @@index([checklistItemId])
}

model Contract {
  id                 String             @id @default(cuid())
  customerId         String
  addressId          String
  value              Decimal            @db.Decimal(10, 2)
  firstPaymentOn     DateTime
  finalPaymentOn     DateTime?
  basedOnChecklistId String?
  scheduledStartDate DateTime
  scheduledEndDate   DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  remarks            String?
  servicePackage     String?
  contractType       ContractType       @default(INSPECTION)
  customerComments   String?
  customerRating     Int?
  marketingSourceId  String?
  marketingSource    MarketingSource?   @relation(fields: [marketingSourceId], references: [id])
  referenceIds       String[]           @default([])
  createdOn          DateTime           @default(now())
  updatedOn          DateTime           @updatedAt
  status             ContractStatus     @default(DRAFT)
  address            CustomerAddress    @relation(fields: [addressId], references: [id])
  basedOnChecklist   Checklist?         @relation(fields: [basedOnChecklistId], references: [id])
  customer           Customer           @relation(fields: [customerId], references: [id])
  contractChecklist  ContractChecklist?
  workOrders         WorkOrder[]
  reports            ContractReport[]
  // Embedded JSON fields to simplify schema
  contactPersons     Json?
  followUpRemarks    ContractRemark[]
  inspectorRatings   Json?

  @@index([customerId])
  @@index([addressId])
  @@index([status])
  @@index([scheduledStartDate])
}

model ContractRemark {
  id          String   @id @default(cuid())
  contractId  String
  body        String
  createdOn   DateTime @default(now())
  createdById String?
  type        ContractRemarkType   @default(FOLLOW_UP)
  status      ContractRemarkStatus @default(OPEN)

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  createdBy  User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([contractId])
  @@index([createdOn])
  @@index([status])
}

model ContractChecklist {
  id         String                  @id @default(cuid())
  contractId String                  @unique
  createdOn  DateTime                @default(now())
  updatedOn  DateTime                @updatedAt
  status     Status                  @default(ACTIVE)
  contract   Contract                @relation(fields: [contractId], references: [id], onDelete: Cascade)
  items      ContractChecklistItem[]
}

model ContractChecklistItem {
  id                  String            @id @default(cuid())
  contractChecklistId String
  name                String
  remarks             String?
  photos              String[]
  videos              String[]
  enteredOn           DateTime?
  enteredById         String?
  workOrderId         String?
  order               Int
  status              ChecklistItemStatus @default(PENDING)
  condition           Condition?
  contractChecklist   ContractChecklist @relation(fields: [contractChecklistId], references: [id], onDelete: Cascade)
  enteredBy           Inspector?        @relation(fields: [enteredById], references: [id])
  workOrder           WorkOrder?        @relation(fields: [workOrderId], references: [id])
  contributions       ItemEntry[]
  checklistTasks      ChecklistTask[]
  locations           ContractChecklistLocation[]

  @@unique([contractChecklistId, order])
  @@index([contractChecklistId])
  @@index([workOrderId])
}

model ContractChecklistLocation {
  id         String                @id @default(cuid())
  itemId     String
  name       String
  status     ChecklistItemStatus   @default(PENDING)
  order      Int?
  createdOn  DateTime              @default(now())
  updatedOn  DateTime              @updatedAt
  item       ContractChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tasks      ChecklistTask[]

  @@index([itemId])
  @@index([status])
}

// Contract contact persons are now stored inline as JSON on Contract.contactPersons

// Per-inspector contribution to a checklist item (remarks/media/selection)
model ItemEntry {
  id              String   @id @default(cuid())
  itemId          String
  inspectorId     String?
  userId          String?
  remarks         String?
  cause           String?
  resolution      String?
  includeInReport Boolean @default(false)
  condition       Condition?
  taskId          String?
  photos          String[] @default([])
  videos          String[] @default([])
  createdOn       DateTime @default(now())
  updatedOn       DateTime @updatedAt

  item            ContractChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  inspector       Inspector?             @relation(fields: [inspectorId], references: [id])
  user            User?                  @relation(fields: [userId], references: [id])
  task            ChecklistTask?         @relation(fields: [taskId], references: [id], onDelete: SetNull)
  media           ItemEntryMedia[]

  @@index([itemId])
  @@index([inspectorId])
  @@index([userId])
  @@index([taskId])
}

// Inspector rating per contract
// Inspector ratings are now stored inline as JSON on Contract.inspectorRatings

enum InspectorContractRatingValue {
  GOOD
  FAIR
  BAD
}

model ItemEntryMedia {
  id        String               @id @default(cuid())
  entryId   String
  url       String
  caption   String?
  type      ItemEntryMediaType
  order     Int                  @default(0)
  createdOn DateTime             @default(now())

  entry ItemEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
  @@index([type])
}

enum ItemEntryMediaType {
  PHOTO
  VIDEO
}

model ChecklistTask {
  id          String   @id @default(cuid())
  itemId      String
  locationId  String?
  inspectorId String?
  name        String
  status      ChecklistTaskStatus @default(PENDING)
  condition   Condition?
  photos      String[] @default([])
  videos      String[] @default([])
  createdOn   DateTime @default(now())
  updatedOn   DateTime @updatedAt

  item       ContractChecklistItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  location   ContractChecklistLocation? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  entries    ItemEntry[]
  inspector  Inspector?             @relation(fields: [inspectorId], references: [id], onDelete: SetNull)

  @@index([itemId])
  @@index([inspectorId])
  @@index([locationId])
}

model WorkOrder {
  id                     String                  @id @default(cuid())
  contractId             String
  scheduledStartDateTime DateTime
  scheduledEndDateTime   DateTime
  actualStart            DateTime?
  actualEnd              DateTime?
  signature              String?
  signOffBy              String?
  remarks                String?
  createdOn              DateTime                @default(now())
  updatedOn              DateTime                @updatedAt
  status                 WorkOrderStatus         @default(SCHEDULED)
  checklistItems         ContractChecklistItem[]
  contract               Contract                @relation(fields: [contractId], references: [id])
  inspectors             Inspector[]

  @@index([contractId])
  @@index([status])
  @@index([scheduledStartDateTime])
}

model ContractReport {
  id               String   @id @default(cuid())
  contractId       String
  title            String
  version          Decimal  @db.Decimal(4, 1)
  generatedOn      DateTime @default(now())
  generatedById    String?
  storageKey       String
  fileUrl          String
  fileSizeBytes    Int

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  generatedBy User?    @relation(fields: [generatedById], references: [id], onDelete: SetNull)

  @@unique([contractId, version])
  @@index([contractId])
  @@index([generatedOn])
}

/// Configurable labels for area size ranges (e.g., 50–399 sqft)
model PropertySizeRangeOption {
  id        String             @id @default(cuid())
  code      String             @unique
  label     String
  order     Int                @default(0)
  status    Status             @default(ACTIVE)
  createdOn DateTime           @default(now())
  updatedOn DateTime           @updatedAt
}

model ChecklistTag {
  id        String   @id @default(cuid())
  label     String   @unique
  taskTemplates Json?
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt

  @@index([label])
}

// New Property table to manage available property types dynamically
model Property {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
  status    Status   @default(ACTIVE)
  sizes     PropertySizeOption[]

  @@index([status])
}


// Property size options linked to Property (type)
model PropertySizeOption {
  id         String   @id @default(cuid())
  propertyId String
  code       String
  name       String
  createdOn  DateTime @default(now())
  updatedOn  DateTime @updatedAt
  status     Status   @default(ACTIVE)

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, code])
  @@index([propertyId])
  @@index([status])
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
}

enum MemberTier {
  BRONZE
  SILVER
  GOLD
}

enum PropertyType {
  HDB
  CONDO
  EC
  APARTMENT
  LANDED
}

enum PropertyRelationship {
  AGENT
  OWNER
  TENANT
}

enum PropertySize {
  HDB_1_ROOM
  HDB_2_ROOM
  HDB_3_ROOM
  HDB_4_ROOM
  HDB_5_ROOM
  HDB_EXECUTIVE
  HDB_JUMBO
  STUDIO
  ONE_BEDROOM
  TWO_BEDROOM
  THREE_BEDROOM
  FOUR_BEDROOM
  PENTHOUSE
  TERRACE
  SEMI_DETACHED
  DETACHED
  BUNGALOW
  GOOD_CLASS_BUNGALOW
}

// Removed enum PropertySizeRange – size ranges now dynamic via PropertySizeRangeOption

// Status for contract checklist items
enum ChecklistItemStatus {
  PENDING
  COMPLETED
}

enum ChecklistTaskStatus {
  PENDING
  COMPLETED
}

// Physical condition options for checklist items
enum Condition {
  GOOD
  FAIR
  UNSATISFACTORY
  UN_OBSERVABLE
  NOT_APPLICABLE
}

enum InspectorType {
  FULL_TIME
  PART_TIME
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ContractStatus {
  DRAFT
  CONFIRMED
  SCHEDULED
  COMPLETED
  TERMINATED
  CANCELLED
}

enum ContractType {
  INSPECTION
  REPAIR
}

enum ContractRemarkType {
  FYI
  FOLLOW_UP
}

enum ContractRemarkStatus {
  OPEN
  COMPLETED
}

model MarketingSource {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  status    Status   @default(ACTIVE)
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt

  contracts Contract[]

  @@index([status])
}

enum WorkOrderStatus {
  SCHEDULED
  STARTED
  CANCELLED
  COMPLETED
}

// Roles for application users
enum Role {
  ADMIN
}
