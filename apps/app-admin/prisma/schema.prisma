// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Customer entity
model Customer {
  id               String            @id @default(cuid())
  name             String
  type             CustomerType      // Individual or Company
  personInCharge   String            // Same as name if individual
  email            String
  phone            String
  isMember         Boolean           @default(false)
  memberSince      DateTime?
  memberExpiredOn  DateTime?
  memberTier       MemberTier?
  billingAddress   String
  remarks          String?
  createdOn        DateTime          @default(now())
  updatedOn        DateTime          @updatedAt
  status           Status            @default(ACTIVE)
  
  // Relations
  addresses        CustomerAddress[]
  contracts        Contract[]

  @@index([email])
  @@index([phone])
  @@index([status])
}

// Customer Addresses entity
model CustomerAddress {
  id           String       @id @default(cuid())
  customerId   String
  address      String
  postalCode   String
  propertyType PropertyType
  propertySize PropertySize
  remarks      String?
  createdOn    DateTime     @default(now())
  updatedOn    DateTime     @updatedAt
  status       Status       @default(ACTIVE)
  
  // Relations
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contracts    Contract[]

  @@index([customerId])
  @@index([status])
}

// Inspector entity
model Inspector {
  id              String           @id @default(cuid())
  name            String
  mobilePhone     String           @unique
  type            InspectorType    // Full Time or Part Time
  specialization  String[]         // Array of specializations
  remarks         String?
  createdOn       DateTime         @default(now())
  updatedOn       DateTime         @updatedAt
  status          Status           @default(ACTIVE)
  
  // Relations
  workOrders      WorkOrder[]
  checklistItems  ContractChecklistItem[]

  @@index([mobilePhone])
  @@index([status])
}

// Checklist template entity
model Checklist {
  id           String           @id @default(cuid())
  name         String
  propertyType PropertyType
  remarks      String?
  createdOn    DateTime         @default(now())
  updatedOn    DateTime         @updatedAt
  status       Status           @default(ACTIVE)
  
  // Relations
  items        ChecklistItem[]
  contracts    Contract[]

  @@index([propertyType])
  @@index([status])
}

// Checklist Items (template)
model ChecklistItem {
  id          String     @id @default(cuid())
  checklistId String
  name        String     // e.g., "Bedroom", "Bathroom"
  action      String     // Action to be done
  order       Int        // For ordering items
  
  // Relations
  checklist   Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@index([checklistId])
  @@unique([checklistId, order])
}

// Contract entity
model Contract {
  id                  String           @id @default(cuid())
  customerId          String
  addressId           String
  value               Decimal          @db.Decimal(10, 2)
  firstPaymentOn      DateTime
  finalPaymentOn      DateTime?
  basedOnChecklistId  String?
  scheduledStartDate  DateTime
  scheduledEndDate    DateTime
  actualStartDate     DateTime?
  actualEndDate       DateTime?
  remarks             String?
  servicePackage      String?
  customerComments    String?
  customerRating      Int?
  createdOn           DateTime         @default(now())
  updatedOn           DateTime         @updatedAt
  status              ContractStatus   @default(DRAFT)
  
  // Relations
  customer            Customer         @relation(fields: [customerId], references: [id])
  address             CustomerAddress  @relation(fields: [addressId], references: [id])
  basedOnChecklist    Checklist?       @relation(fields: [basedOnChecklistId], references: [id])
  contractChecklist   ContractChecklist?
  workOrders          WorkOrder[]

  @@index([customerId])
  @@index([addressId])
  @@index([status])
  @@index([scheduledStartDate])
}

// Contract Checklist (customized from template)
model ContractChecklist {
  id         String                    @id @default(cuid())
  contractId String                    @unique
  createdOn  DateTime                  @default(now())
  updatedOn  DateTime                  @updatedAt
  status     Status                    @default(ACTIVE)
  
  // Relations
  contract   Contract                  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  items      ContractChecklistItem[]
}

// Contract Checklist Items (actual inspection items)
model ContractChecklistItem {
  id                   String             @id @default(cuid())
  contractChecklistId  String
  name                 String             // e.g., "Bedroom", "Bathroom"
  remarks              String?
  photos               String[]           // Array of URLs to DigitalOcean Spaces
  videos               String[]           // Array of URLs to DigitalOcean Spaces
  enteredOn            DateTime?
  enteredById          String?
  workOrderId          String?
  order                Int                // For ordering items
  
  // Relations
  contractChecklist    ContractChecklist  @relation(fields: [contractChecklistId], references: [id], onDelete: Cascade)
  enteredBy            Inspector?         @relation(fields: [enteredById], references: [id])
  workOrder            WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@index([contractChecklistId])
  @@index([workOrderId])
  @@unique([contractChecklistId, order])
}

// Work Order entity
model WorkOrder {
  id                    String                  @id @default(cuid())
  contractId            String
  inspectorId           String
  scheduledStartDateTime DateTime
  scheduledEndDateTime  DateTime
  actualStart           DateTime?
  actualEnd             DateTime?
  signature             String?                 // Base64 signature
  signOffBy             String?                 // Name of person who signed off
  remarks               String?
  createdOn             DateTime                @default(now())
  updatedOn             DateTime                @updatedAt
  status                WorkOrderStatus         @default(SCHEDULED)
  
  // Relations
  contract              Contract                @relation(fields: [contractId], references: [id])
  inspector             Inspector               @relation(fields: [inspectorId], references: [id])
  checklistItems        ContractChecklistItem[]

  @@index([contractId])
  @@index([inspectorId])
  @@index([status])
  @@index([scheduledStartDateTime])
}

// Enums
enum CustomerType {
  INDIVIDUAL
  COMPANY
}

enum MemberTier {
  BRONZE
  SILVER
  GOLD
}

enum PropertyType {
  HDB
  CONDO
  EC
  APARTMENT
  LANDED
}

enum PropertySize {
  // HDB sizes
  HDB_1_ROOM
  HDB_2_ROOM
  HDB_3_ROOM
  HDB_4_ROOM
  HDB_5_ROOM
  HDB_EXECUTIVE
  HDB_JUMBO
  
  // Condo/EC/Apartment sizes
  STUDIO
  ONE_BEDROOM
  TWO_BEDROOM
  THREE_BEDROOM
  FOUR_BEDROOM
  PENTHOUSE
  
  // Landed sizes
  TERRACE
  SEMI_DETACHED
  DETACHED
  BUNGALOW
  GOOD_CLASS_BUNGALOW
}

enum InspectorType {
  FULL_TIME
  PART_TIME
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ContractStatus {
  DRAFT
  CONFIRMED
  SCHEDULED
  COMPLETED
  CLOSED
  CANCELLED
}

enum WorkOrderStatus {
  SCHEDULED  // Blue color
  STARTED    // Orange color
  CANCELLED  // Red color
  COMPLETED  // Green color
}